package autobundle.compiler;

/**
 * 创建时间：2019/4/8
 * 编写人： chengxin
 * 功能描述：
 */

import com.squareup.javapoet.TypeName;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.annotation.Annotation;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Nullable;
import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.Name;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.ArrayType;
import javax.lang.model.type.DeclaredType;
import javax.lang.model.type.TypeKind;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.type.TypeVariable;
import javax.lang.model.util.Types;
import javax.tools.Diagnostic.Kind;

import autobundle.annotation.BindBundle;

import static javax.lang.model.element.ElementKind.CLASS;
import static javax.lang.model.element.Modifier.PRIVATE;
import static javax.lang.model.element.Modifier.STATIC;

/**
 * 创建时间：2019/4/4
 * 编写人： chengxin
 * 功能描述：
 */
//@AutoService(Processor.class)
public class Auto2 extends AbstractProcessor {
    private Types typeUtils;
    private Filer filer;

    @Override
    public synchronized void init(ProcessingEnvironment env) {
        super.init(env);
        typeUtils = env.getTypeUtils();
        filer = env.getFiler();
        int.class.getName();
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {


        Map<TypeElement, BundleSet> bindingMap = findAndParseTargets(roundEnv);

        for (Map.Entry<TypeElement, BundleSet> entry : bindingMap.entrySet()) {
            TypeElement typeElement = entry.getKey();
            BundleSet binding = entry.getValue();

//            JavaFile javaFile = binding.brewJava(sdk, debuggable);
//            try {
//                javaFile.writeTo(filer);
//            } catch (IOException e) {
//                error("Unable to write binding for type %s: %s", typeElement, e.getMessage());
//            }
        }

        return false;
    }

    private Map<TypeElement, BundleSet> findAndParseTargets(RoundEnvironment env) {
        Map<TypeElement, BundleSet.Builder> builderMap = new LinkedHashMap<>();
        Set<TypeElement> erasedTargetNames = new LinkedHashSet<>();

        // Process each @BindView element.
        for (Element element : env.getElementsAnnotatedWith(BindBundle.class)) {
            // we don't SuperficialValidation.validateElement(element)
            // so that an unresolved View type can be generated by later processing rounds
            try {
                parseBindView(element, builderMap, erasedTargetNames);
            } catch (Exception e) {
                logParsingError(element, BindBundle.class, e);
            }
        }
        // Associate superclass binders with their subclass binders. This is a queue-based tree walk
        // which starts at the roots (superclasses) and walks to the leafs (subclasses).
        Deque<Map.Entry<TypeElement, BundleSet.Builder>> entries =
                new ArrayDeque<>(builderMap.entrySet());
        Map<TypeElement, BundleSet> bindingMap = new LinkedHashMap<>();
        while (!entries.isEmpty()) {
            Map.Entry<TypeElement, BundleSet.Builder> entry = entries.removeFirst();

            TypeElement type = entry.getKey();
            BundleSet.Builder builder = entry.getValue();

            TypeElement parentType = findParentType(type, erasedTargetNames);
            if (parentType == null) {
                bindingMap.put(type, builder.build());
            } else {
                BundleSet parentBinding = bindingMap.get(parentType);
                if (parentBinding != null) {
                    builder.setParent(parentBinding);
                    bindingMap.put(type, builder.build());
                } else {
                    // Has a superclass binding but we haven't built it yet. Re-enqueue for later.
                    entries.addLast(entry);
                }
            }
        }

        return bindingMap;
    }

    private void parseBindView(Element element, Map<TypeElement, BundleSet.Builder> builderMap,
                               Set<TypeElement> erasedTargetNames) {
        TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
        // Start by verifying common generated code restrictions.
        boolean hasError = isInaccessibleViaGeneratedCode(BindBundle.class, "fields", element)
                || isBindingInWrongPackage(BindBundle.class, element);
        TypeMirror elementType = element.asType();
        hasError |= isError(element, elementType);
        if (hasError)
            return;
        Name simpleName = element.getSimpleName();
        // Assemble information on the field.
        String value = element.getAnnotation(BindBundle.class).value();
        BundleSet.Builder builder = builderMap.get(enclosingElement);
        if (builder != null) {
            FieldBundleBinding existingBindingName = builder.findExistingBinding(value);
            if (existingBindingName != null) {
                error(element, "Attempt to use @%s for an already bound value %s on '%s'. (%s.%s)",
                        BindBundle.class.getSimpleName(), value, existingBindingName,
                        enclosingElement.getQualifiedName(), element.getSimpleName());
                return;
            }
        } else {
            builder = BundleSet.newBuilder(enclosingElement);//getOrCreateBindingBuilder(builderMap, enclosingElement);
            builderMap.put(enclosingElement, builder);
        }
        String name = simpleName.toString();
        TypeName type = TypeName.get(elementType);
        boolean required = element.getAnnotation(BindBundle.class).required();

        //builder.addField(value, new FieldBundleBinding(name, type, required));
        // Add the type-erased version to the valid binding targets set.
        erasedTargetNames.add(enclosingElement);
    }

    /**
     * Finds the parent binder type in the supplied set, if any.
     */
    private @Nullable
    TypeElement findParentType(TypeElement typeElement, Set<TypeElement> parents) {
        TypeMirror type;
        while (true) {
            type = typeElement.getSuperclass();
            if (type.getKind() == TypeKind.NONE) {
                return null;
            }
            typeElement = (TypeElement) ((DeclaredType) type).asElement();
            if (parents.contains(typeElement)) {
                return typeElement;
            }
        }
    }

    /**
     * @param element     @BindBundle field
     * @param elementType Verify that the target type extends from bundle.
     * @return
     */
    private boolean isError(Element element, TypeMirror elementType) {
        TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
        if (elementType.getKind() == TypeKind.TYPEVAR) {
            TypeVariable typeVariable = (TypeVariable) elementType;
            elementType = typeVariable.getUpperBound();
        }
        //基础数据类型肯定匹配
        if (!elementType.getKind().isPrimitive()) {
            if (elementType.getKind() == TypeKind.ARRAY) {
                ArrayType arrayType = (ArrayType) elementType;
                return isError(element, arrayType.getComponentType());
            } else if (isSubtypeOfType(elementType, OtherKind.ITERABLE.className)) {
                DeclaredType declaredType = (DeclaredType) elementType;
                List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
                if (typeArguments.size() != 1) {
                    error(element, "@%s  %s  must have a generic component. (%s.%s)",
                            BindBundle.class.getSimpleName(), elementType.toString(), enclosingElement.getQualifiedName(),
                            element.getSimpleName());
                    return true;
                } else {
                    return isError(element, typeArguments.get(0));
                }
            } else if (isSubtypeOfType(elementType, OtherKind.MAP.className)) {
                DeclaredType declaredType = (DeclaredType) elementType;
                List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
                if (typeArguments.size() != 2) {
                    error(element, "@%s %s must have two generic component. (%s.%s)",
                            BindBundle.class.getSimpleName(), elementType.toString(), enclosingElement.getQualifiedName(),
                            element.getSimpleName());
                    return true;
                } else {
                    return isError(element, typeArguments.get(0)) || isError(element, typeArguments.get(1));
                }
            } else if (!isSubtypeOfType(elementType, OtherKind.SERIALIZABLE.className)
                    && !isSubtypeOfType(elementType, OtherKind.PARCELABLE.className)) {
                error(element, "@%s %s must be Serializable or Parcelable . (%s.%s)",
                        BindBundle.class.getSimpleName(), elementType.toString(),
                        enclosingElement.getQualifiedName(), element.getSimpleName()
                );
                return true;
            }
        }
        return false;
    }

    private boolean isInaccessibleViaGeneratedCode(Class<? extends Annotation> annotationClass,
                                                   String targetThing, Element element) {
        boolean hasError = false;
        TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();

        // Verify field or method modifiers.
        Set<Modifier> modifiers = element.getModifiers();
        if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {
            error(element, "@%s %s must not be private or static. (%s.%s)",
                    annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),
                    element.getSimpleName());
            hasError = true;
        }

        // Verify containing type.
        if (enclosingElement.getKind() != CLASS) {
            error(element, "@%s %s may only be contained in classes. (%s.%s)",
                    annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),
                    element.getSimpleName());
            hasError = true;
        }

        // Verify containing class visibility is not private.
        if (enclosingElement.getModifiers().contains(PRIVATE)) {
            error(element, "@%s %s may not be contained in private classes. (%s.%s)",
                    annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),
                    element.getSimpleName());
            hasError = true;
        }

        return hasError;
    }

    private boolean isBindingInWrongPackage(Class<? extends Annotation> annotationClass,
                                            Element element) {
        TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
        String qualifiedName = enclosingElement.getQualifiedName().toString();

        if (qualifiedName.startsWith("android.")) {
            error(element, "@%s-annotated class incorrectly in Android framework package. (%s)",
                    annotationClass.getSimpleName(), qualifiedName);
            return true;
        }
        if (qualifiedName.startsWith("java.")) {
            error(element, "@%s-annotated class incorrectly in Java framework package. (%s)",
                    annotationClass.getSimpleName(), qualifiedName);
            return true;
        }

        return false;
    }

    boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
        if (isTypeEqual(typeMirror, otherType)) {
            return true;
        }
        if (typeMirror.getKind() != TypeKind.DECLARED) {
            return false;
        }
        DeclaredType declaredType = (DeclaredType) typeMirror;
        List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
        if (typeArguments.size() > 0) {
            StringBuilder typeString = new StringBuilder(declaredType.asElement().toString());
            if (typeString.toString().equals(otherType)) {
                return true;
            }
        }
        Element element = declaredType.asElement();
        if (!(element instanceof TypeElement)) {
            return false;
        }
        TypeElement typeElement = (TypeElement) element;
        TypeMirror superType = typeElement.getSuperclass();
        if (isSubtypeOfType(superType, otherType)) {
            return true;
        }
        for (TypeMirror interfaceType : typeElement.getInterfaces()) {
            if (isSubtypeOfType(interfaceType, otherType)) {
                return true;
            }
        }
        return false;
    }

    private static boolean isTypeEqual(TypeMirror typeMirror, String otherType) {
        return otherType.equals(typeMirror.toString());
    }

    /**
     * Uses both {@link Types#erasure} and string manipulation to strip any generic types.
     */
    private String doubleErasure(TypeMirror elementType) {
        String name = typeUtils.erasure(elementType).toString();
        int typeParamStart = name.indexOf('<');
        if (typeParamStart != -1) {
            name = name.substring(0, typeParamStart);
        }
        return name;
    }

    @Override
    public Set<String> getSupportedAnnotationTypes() {
        Set<String> types = new LinkedHashSet<>();
        types.add(BindBundle.class.getCanonicalName());
        return types;
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }

    private void logParsingError(Element element, Class<? extends Annotation> annotation,
                                 Exception e) {
        StringWriter stackTrace = new StringWriter();
        e.printStackTrace(new PrintWriter(stackTrace));
        error(element, "Unable to parse @%s binding.\n\n%s", annotation.getSimpleName(), stackTrace);
    }


    private void error(Element element, String message, Object... args) {
        printMessage(Kind.ERROR, element, message, args);
    }

    private void note(Element element, String message, Object... args) {
        printMessage(Kind.NOTE, element, message, args);
    }

    private void printMessage(Kind kind, Element element, String message, Object[] args) {
        if (args.length > 0) {
            message = String.format(message, args);
        }

        processingEnv.getMessager().printMessage(kind, message, element);
    }
}

